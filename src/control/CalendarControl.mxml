<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" 
						  xmlns:uicontrol="uicontrol.*"
						  width="700" height="500" borderVisible="false" backgroundAlpha="0">
	<fx:Script>
		<![CDATA[
			import events.ChangeMenuEvent;
			import events.ChangeUserEvent;
			import events.CloseEvent;
            import events.ListClickEvent;
            import events.PageChangeEvent;
			
			import httpcontrol.CHTTPService;
			import httpcontrol.HttpServiceUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ResizeEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import uicontrol.DayItem;
			import uicontrol.GroupItem;
			import uicontrol.TaskItem;
			
			import util.DateUtil;
			import util.ScheduleUtil;
			import util.TaskUtil;
			import util.ToolUtil;
			
			[Bindable]
			private var list:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var btnlist:ArrayCollection=new ArrayCollection([{"label":"日","value":"daily"},{"label":"周","value":"weekly"},{"label":"月","value":"monthly"}]);
			
			
			override public   function  init(e:FlexEvent):void{
				dateChooser.selectedDate = new Date();
				

					changeShowModel();
//				ToolUtil.taskUnList.addEventListener(CollectionEvent.COLLECTION_CHANGE,taskChange);
				taskChange(null);
			}
			
			override public function changeCurrentUser(e:ChangeUserEvent):void{
				regetSchedule();
			}
			override public function closeContainer(e:CloseEvent):void{
				dispatchEvent(e);
				
			}

            override public function resizeContainer(e:ResizeEvent):void{
                resize(null,false);
            }

            private function listItemClick_handler(e:ListClickEvent):void{

            }

			
			private function changeShowModel():void{
				currentMonth=-1;
				currentWeek=-1;
				currentDaily=-1;
				showCalendar(dateChooser.selectedDate);
			}
			
			
			public function regetSchedule():void{
				var dayItem:DayItem=null;
				for(var  i:Number=0;i<100;i++){
					if(calendarPanel.numElements-1<i){
						break;
					}else{
						dayItem = calendarPanel.getElementAt(i) as DayItem;
						
						dayItem.init();
					}
				}
				if(showModel.selectedItem.value=="monthly"){
					
					if(calendarPanel.numElements>0){
						ToolUtil.getScheduleByDate((calendarPanel.getElementAt(0) as DayItem).date,(calendarPanel.getElementAt(calendarPanel.numElements-1) as DayItem).date);
					}
				}else{
					if(calendarBorder.numElements>1){
						ToolUtil.getScheduleByDate((calendarBorder.getElementAt(1) as DayItem).date,(calendarBorder.getElementAt(calendarBorder.numElements-1) as DayItem).date);
					}
					
				}
//				ToolUtil.taskUnRefresh(showTaskList);
			}
			

			
//			public function showGroup(group:GroupItem,g:Object):void{
//				if(group.isshow){
//					group.color = 0xffffff;
//					group.isshow = false;
//				}else{
//					group.color = g.color;
//					group.isshow = true;
//				}
//
//				var dayItem:DayItem=null;
//				for(var  i:Number=1;i<50;i++){
//					if(calendarPanel.numElements-1>=i){
//
//						dayItem = calendarPanel.getElementAt(i-1) as DayItem;
//
//						dayItem.showSchedule(g.id,group.isshow);
//
//					}
//					if(calendarBorder.numElements-1>=i){
//						dayItem = calendarBorder.getElementAt(i) as DayItem;
//
//						dayItem.showSchedule(g.id,group.isshow);
//
//					}
//					if(daySchedule.numElements-1>=i){
//						dayItem = daySchedule.getElementAt(i) as DayItem;
//
//						dayItem.showSchedule(g.id,group.isshow);
//
//					}
//
//				}
//			}
			
			
			private var currentMonth:Number=-1;
			private var currentWeek:Number=-1;
			private var currentDaily:Number=-1;
			
			private function showCalendar_Monthly(date:Date=null):void{
				var fr:DateFormatter=new DateFormatter();
				fr.formatString="YYYYMMDD";
				//				calendarPanel.removeAllElements();
				var dayItem:DayItem=null;
				var newDayItem:DayItem=null;
				var f:Boolean=true;
				var count:Number=0;
				for(var i:Number=0;i<100;i++){
					if(calendarPanel.numElements-1<i){
						dayItem = new DayItem();
						dayItem.is_all_day = 1;
						newDayItem = dayItem;
						calendarPanel.addElement(dayItem);
						f = true;
					}else{
						dayItem = calendarPanel.getElementAt(i) as DayItem;
						dayItem.is_all_day = 1;
						f = false;
					}
					dayItem.date = fr.format(date);
					dayItem.nowdate = fr.format(dateChooser.selectedDate);
					if(!f){
						dayItem.init();
					}
					date.date+=1;
					if(showModel.selectedItem.value=="monthly"){
						if(currentMonth<date.month&&date.day==0){
							count=i+1;
							break;
						}
					}
				}
				
				for(i=calendarPanel.numElements-1;i>=count;i--){
					calendarPanel.removeElementAt(i);
				}
				if(calendarPanel.numElements>0){
					ToolUtil.getScheduleByDate((calendarPanel.getElementAt(0) as DayItem).date,(calendarPanel.getElementAt(calendarPanel.numElements-1) as DayItem).date);
				}
				resize();
				if (newDayItem!=null){
					newDayItem.addEventListener(FlexEvent.CREATION_COMPLETE,resize);
				}
			}
			private function showCalendar_Weekly(date:Date=null):void{
				
				var fr:DateFormatter=new DateFormatter();
				fr.formatString="YYYYMMDD";
				//				calendarPanel.removeAllElements();
				var dayItem:DayItem=null;
				var newDayItem:DayItem=null;
				var f:Boolean=true;
				var count:Number=0;
				var weekDate:Array=new Array();
				for(var i:Number=1;i<100;i++){
					if(calendarBorder.numElements-1<i){
						dayItem = new DayItem();
						newDayItem = dayItem;
						dayItem.is_all_day = 2;
						calendarBorder.addElement(dayItem);
						f = true;
					}else{
						dayItem = calendarBorder.getElementAt(i) as DayItem;
						dayItem.is_all_day = 2;
						f = false;
					}
					dayItem.date = fr.format(date);
					dayItem.nowdate = fr.format(dateChooser.selectedDate);
					
					if(!f){
						dayItem.init();
					}
					dayItem = new DayItem();
					dayItem.is_all_day = 3;
					dayItem.date = fr.format(date);
					dayItem.nowdate = fr.format(dateChooser.selectedDate);
					daySchedule.addElement(dayItem);
					weekDate.push(date.date);
					date.date+=1;
					
					if(date.day==0){
						count=i+1;
						break;
					}
				
					
				}
				
				
				for(i=calendarBorder.numElements-1;i>=count;i--){
					calendarBorder.removeElementAt(i);
				}
				if(calendarBorder.numElements>0){
					ToolUtil.getScheduleByDate((calendarBorder.getElementAt(1) as DayItem).date,(calendarBorder.getElementAt(calendarBorder.numElements-1) as DayItem).date);
				}
				resize();
				if (newDayItem!=null){
					newDayItem.addEventListener(FlexEvent.CREATION_COMPLETE,resize);
				}
			}
			private function showCalendar_Daily(date:Date=null):void{
				var fr:DateFormatter=new DateFormatter();
				fr.formatString="YYYYMMDD";
				//				calendarPanel.removeAllElements();
				var dayItem:DayItem=null;
				var newDayItem:DayItem=null;
				var f:Boolean=true;
				var count:Number=0;
				for(var i:Number=1;i<100;i++){
					if(calendarBorder.numElements-1<i){
						dayItem = new DayItem();
						newDayItem = dayItem;
						dayItem.is_all_day = 2;
						calendarBorder.addElement(dayItem);
						f = true;
					}else{
						dayItem = calendarBorder.getElementAt(i) as DayItem;
						dayItem.is_all_day = 2;
						f = false;
					}
					dayItem.date = fr.format(date);
					dayItem.nowdate = fr.format(dateChooser.selectedDate);
					
					if(!f){
						dayItem.init();
					}
					dayItem = new DayItem();
					dayItem.is_all_day = 3;
					dayItem.date = fr.format(date);
					dayItem.nowdate = fr.format(dateChooser.selectedDate);
					daySchedule.addElement(dayItem);
					date.date+=1;
					
					count=i+1;
					if(count==6){
						break;
					}
					
				}
				
				
				for(i=calendarBorder.numElements-1;i>=count;i--){
					calendarBorder.removeElementAt(i);
				}
				if(calendarBorder.numElements>0){
					ToolUtil.getScheduleByDate((calendarBorder.getElementAt(1) as DayItem).date,(calendarBorder.getElementAt(calendarBorder.numElements-1) as DayItem).date);
				}
				resize();
				if (newDayItem!=null){
					newDayItem.addEventListener(FlexEvent.CREATION_COMPLETE,resize);
				}
			}
			
			private function showCalendar(date:Date=null):void{
				if(date==null){
					date = new Date();
				}else{
					date = new Date(date.fullYear,date.month,date.date);
					
				}
				
				if(showModel.selectedItem.value=="monthly"){
					
					if(currentMonth==date.month){
						return;
					}
					currentMonth=date.month;
					if(date.date!=1){
						date.date=1;
					}
					if(date.day!=0){
						date.date -= date.day;
					}
				}
				if(showModel.selectedItem.value=="weekly"){
					
					if(date.day!=0){
						date.date -= date.day;
					}
					if(currentMonth==date.month&&currentWeek==date.date){
						return;
					}
					
				}
				if(showModel.selectedItem.value=="daily"){
					date.date -= date.day;
					date.date+=1;
					if(currentMonth==date.month&&currentDaily==date.date){
						return;
					}
					
				}
				
				currentWeek=date.date;
				currentDaily=date.date;
				daySchedule.removeAllElements();
				if(showModel.selectedItem.value=="monthly"){
					daySchedule.height = 0;
					daySchedule.visible = false;
					calendarBorder.visible = false;
					calendarBorder.removeAllElements();
					calendarPanel.visible = true;
					
					showCalendar_Monthly(date);
				}else{
					if(calendarBorder.numElements==0){
						var timeline:DayItem=new DayItem();
						timeline.width = 50;
						timeline.is_all_day=2;
						timeline.height =80*24;
						calendarBorder.addElement(timeline);
					}
					if(daySchedule.numElements==0){
						var timeline2:DayItem=new DayItem();
						timeline2.width = 50;
						timeline2.height = 100;
						timeline2.blank=true;
						daySchedule.addElement(timeline2);
					}
				}
				if(showModel.selectedItem.value=="weekly"){
					daySchedule.height = 100;
					daySchedule.visible = true;
					calendarBorder.visible = true;
					calendarPanel.visible = false;
					
					showCalendar_Weekly(date);
				}
				if(showModel.selectedItem.value=="daily"){
					daySchedule.height = 100;
					daySchedule.visible = true;
					calendarBorder.visible = true;
					calendarPanel.visible = false;
					showCalendar_Daily(date);
				}
				
				
				
				
			}
			[Bindable]
			private var dayWidth:Number=0;
			private function resize(e:FlexEvent=null,flag:Boolean=true):void{
				var dayItem:DayItem=null;
				var row:Number = 0;
				var dayHeight:Number;
				dayHeight=80*24;
				dayWidth = (this.width - 12-taskPanel.width-190-7+1)/7;
				weekHead.height=0;
				dayHead.height=25;
				if(showModel.selectedItem.value=="monthly"){
					row=calendarPanel.numElements/7;
					dayHeight =(this.height - 27-row+1-2-11)/row;
					
					calendarPanel.requestedColumnCount = 7;
					
					weekHead.height=25;
					dayHead.height=0;
					
				}
				if(showModel.selectedItem.value=="weekly"){
					dayWidth = (this.width - 12-taskPanel.width-190-7+1-15-51)/7;
					weekHead.height=25;
					dayHead.height=0;
					calendarBorder.width = dayWidth*7+6+51;
					
				}
				if(showModel.selectedItem.value=="daily"){
					dayWidth = (this.width - 12-taskPanel.width-190-15-4-51)/5;
					calendarBorder.width = dayWidth*5+4+51;
					
				}
				
				
				
				
				
				if(showModel.selectedItem.value=="monthly"){
					for(var  i:Number=0;i<100;i++){
						if(calendarPanel.numElements-1<i){
							break;
						}else{
							dayItem = calendarPanel.getElementAt(i) as DayItem;
							dayItem.height = dayHeight;
							dayItem.width = dayWidth;
							dayItem.invalidateSize();
							dayItem.invalidateDisplayList();
							
						}
					}
					
				}else{
					for(i=0;i<100;i++){
						if(calendarPanel.numElements-1<i){
							break;
						}else{
							dayItem = calendarPanel.getElementAt(i) as DayItem;
							dayItem.height = 10;
							dayItem.width = 10;
							dayItem.invalidateSize();
							
						}
					}
					for( i=1;i<100;i++){
						if(calendarBorder.numElements-1<i){
							break;
						}else{
							dayItem = calendarBorder.getElementAt(i) as DayItem;
							dayItem.height = dayHeight;
							dayItem.width = dayWidth;
							dayItem.invalidateSize();
							dayItem.showTimeLine(dayWidth,row==0?true:false);
							dayItem.invalidateDisplayList();
							
						}
					}
					for( i=1;i<9;i++){
						if(daySchedule.numElements-1<i){
							break;
						}else{
							dayItem = daySchedule.getElementAt(i) as DayItem;
							dayItem.height = 100;
							dayItem.width = dayWidth;
							dayItem.invalidateSize();
							dayItem.invalidateDisplayList();
							
						}
					}
					if(flag){
						var now:Date=new Date();
						var y:Number=(now.hours-3)*80;
						calendarScroller.viewport.verticalScrollPosition=y;
					}
				}
				calendarPanel.invalidateSize();
				calendarPanel.invalidateDisplayList();
				calendayGroup.invalidateSize();
				calendayGroup.invalidateDisplayList();
				calendarScroller.invalidateSize();
				calendarScroller.invalidateDisplayList();
				
				
			}
			



			
	
			
	
			
			public function createSchedule():void{
				ScheduleUtil.createSchedule();
			}
			
			private function changeDate():void{
				showCalendar(dateChooser.selectedDate);
			}
			
			private function showTask():void{
				if(taskPanel.width>100){
					taskPanel.width=0;
					mytask.color = 0xffffff;
				}else{
					mytask.color = 0xfad165;
					taskPanel.width=250;
					
				}
				resize(null,false);
				this.invalidateSize();
			}
			
			private function showTaskList(result:Object,e:ResultEvent):void{
				
			}
			private function taskChange(e:CollectionEvent):void{
				
				taskunpanel.removeAllElements();
				var taskItem:TaskItem=null;
//				for each(var obj:Object in ToolUtil.taskUnList){
//					taskItem=new TaskItem();
//					taskItem.taskData = obj;
//					taskItem.taskName = obj.title;
//					taskItem.color = obj.color;
//					taskItem.taskId = obj.id;
//					taskunpanel.addElement(taskItem);
//
//				}
				
			}
			
			private function createTask():void{
				TaskUtil.createTask();
				
			}
			
			private function createGroup():void{
				var obj:Object=new Object();
				var evt:ChangeMenuEvent=new ChangeMenuEvent(ChangeMenuEvent.ChangeMenu_EventStr,"group",obj,true)
				FlexGlobals.topLevelApplication.dispatchEvent(evt);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:DateFormatter id="monthstr" formatString="YYYY年MM月" >
			
		</mx:DateFormatter>
	</fx:Declarations>
	
		<control:layout>
			<s:HorizontalLayout gap="5">
				
			</s:HorizontalLayout>
		</control:layout>

        <s:BorderContainer id="datePanel" width="230" height="100%" borderVisible="false" >
            <s:layout>
                <s:VerticalLayout gap="5" paddingLeft="5" paddingTop="10">
                </s:VerticalLayout>
            </s:layout>
            <s:BorderContainer width="100%" height="30" borderVisible="false">
                <s:layout>
                    <s:HorizontalLayout gap="5" verticalAlign="middle">

                    </s:HorizontalLayout>
                </s:layout>
                <s:Button chromeColor="red" label="创建日程" color="#ffffff"   height="25" click="createSchedule()" />
                <s:BorderContainer width="100%" height="30" borderVisible="false">
                    <s:layout>
                        <s:HorizontalLayout gap="5" horizontalAlign="right" verticalAlign="middle" paddingRight="3">

                        </s:HorizontalLayout>
                    </s:layout>
                    <s:ButtonBar id="showModel" change="changeShowModel()" dataProvider="{btnlist}" width="100" selectedIndex="0" chromeColor="#faf0cc"   labelField="label" />
                </s:BorderContainer>
            </s:BorderContainer>

            <s:Label text="{monthstr.format(dateChooser.selectedDate)}" fontSize="18" fontWeight="bold" paddingTop="10" >

            </s:Label>
            <mx:DateChooser id="dateChooser" width="100%" selectedDate="{new Date()}" change="changeDate()" dayNames="{DateUtil.dayNames}" monthNames="{DateUtil.monthNames}" />

            <s:Label id="mytasklbl" text="我的备忘" fontSize="18"  paddingTop="10" >
            </s:Label>
            <uicontrol:ScheduleItem id="mytask" color="#fad165" scheduleName="备忘" fun="showTask"/>
            <s:Label  text="组织结构" fontSize="18"  paddingTop="10" >
            </s:Label>
            <uicontrol:OrgChatList id="addressList"   type="org" borderVisible="false"
                                   listItemClick="listItemClick_handler(event)"
                                   width="100%" height="100%" />

        </s:BorderContainer>

		<s:BorderContainer id="rightContainner" width="100%" height="100%" backgroundAlpha="0"  borderVisible="false">
			<s:layout>
				<s:VerticalLayout gap="1">
					
				</s:VerticalLayout>
				
			</s:layout>
			<s:BorderContainer id="weekHead" width="100%" height="25" visible="{weekHead.height==0?false:true}" borderVisible="false" backgroundAlpha="0">
				<s:layout>
					<s:HorizontalLayout gap="1" verticalAlign="middle" >
						
					</s:HorizontalLayout>
				</s:layout>
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期日" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期一" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期二" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期三" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期四" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期五" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期六" textAlign="center" verticalAlign="middle" />
					
			</s:BorderContainer>
			<s:BorderContainer id="dayHead" width="100%" height="0" borderVisible="false" backgroundAlpha="0">
				<s:layout>
					<s:HorizontalLayout gap="1" verticalAlign="middle" >
						
					</s:HorizontalLayout>
				</s:layout>
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期一" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期二" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期三" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期四" textAlign="center" verticalAlign="middle" />
				<s:Label  width="{dayWidth}" height="25" fontSize="18"  text="星期五" textAlign="center" verticalAlign="middle" />
				
			</s:BorderContainer>
			<s:BorderContainer id="daySchedule" minWidth="100" height="0" borderVisible="false"   backgroundColor="#999999">
				<s:layout>
					<s:HorizontalLayout gap="1" verticalAlign="middle" paddingBottom="1" paddingRight="1" paddingLeft="1" paddingTop="1">
						
					</s:HorizontalLayout>
				</s:layout>
				
			</s:BorderContainer>
			<s:BorderContainer width="100%" height="100%" borderVisible="false"  backgroundColor="#999999">
				<s:layout>
					<s:VerticalLayout gap="0"  paddingBottom="1" paddingRight="1" paddingLeft="1" paddingTop="1">
						
					</s:VerticalLayout>
					
				</s:layout>
				<s:Scroller id="calendarScroller" width="100%" height="100%">
					<s:Group id="calendayGroup"  width="100%" height="100%">
						<s:TileGroup id="calendarPanel" height="100%" requestedColumnCount="7" horizontalGap="1" verticalGap="1"   >
							
						</s:TileGroup>
						<s:BorderContainer id="calendarBorder"  borderVisible="false" backgroundAlpha="0">
							<s:layout>
								<s:HorizontalLayout gap="1">
									
								</s:HorizontalLayout>
							</s:layout>
						</s:BorderContainer>
					</s:Group>
				</s:Scroller>
			</s:BorderContainer>
			
				
		</s:BorderContainer>
		<s:Scroller id="taskPanel"  width="250" height="100%">
			<s:Group>
				<s:BorderContainer width="100%" borderVisible="false" >
					<s:layout>
						<s:VerticalLayout gap="5" paddingLeft="5" paddingTop="10">
						</s:VerticalLayout>
					</s:layout>
					<s:BorderContainer width="100%" height="25"  borderVisible="false" backgroundAlpha="0">
						<s:layout>
							<s:HorizontalLayout gap="1" verticalAlign="middle">
								
							</s:HorizontalLayout>
						</s:layout>
						<s:Label text="我的备忘" fontSize="18"  paddingTop="10" >
						</s:Label>
						<s:BorderContainer   width="100%" height="25" borderVisible="false" backgroundAlpha="0">
							<s:layout>
								<s:HorizontalLayout gap="5" horizontalAlign="right" verticalAlign="middle" paddingRight="15">
									
								</s:HorizontalLayout>
							</s:layout>
							<uicontrol:BtnAdd clickFun="createTask" />
							<uicontrol:BtnDel clickFun="showTask" />
						</s:BorderContainer>
					</s:BorderContainer>
					
					<s:BorderContainer id="taskunpanel" width="100%" borderVisible="false"  >
						<s:layout>
							<s:VerticalLayout>
							</s:VerticalLayout>
						</s:layout>
					</s:BorderContainer>
				</s:BorderContainer>
			</s:Group>
		</s:Scroller>
</control:CBorderContainer>
