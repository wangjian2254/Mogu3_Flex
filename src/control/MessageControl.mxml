<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" width="700" height="700" borderVisible="false" backgroundAlpha="0" xmlns:uicontrol="uicontrol.*">
	<fx:Script>
		<![CDATA[
        import control.window.MessagePanel;

        import events.ChangeUserEvent;
        import events.CloseEvent;

        import httpcontrol.HttpServiceUtil;

        import mx.collections.ArrayCollection;
        import mx.core.FlexGlobals;
        import mx.events.FlexEvent;
        import mx.events.ItemClickEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        import spark.events.GridSelectionEvent;

        import uicontrol.MessageItem;

        [Bindable]
        private var buttonArr0:ArrayCollection = new ArrayCollection([
            {'label': '全部', 'mode': 'all'},
            {'label': '未读信息', 'mode': 'unread'},
            {'label': '已读信息', 'mode': 'read'},
            {'label': '草稿', 'mode': 'saved'}
        ]);
        [Bindable]
        private var buttonArr1:ArrayCollection = new ArrayCollection([
            {'label': '刷新', 'ico': refreshimg, 'mode': 'refresh'},
            {'label': '写信息', 'ico': wximg, 'mode': 'add'}
        ]);
        [Bindable]
        private var buttonArr2:ArrayCollection = new ArrayCollection([
            {'label': '回复', 'ico': saveimg, 'mode': 'huifu'},
            {'label': '转发', 'ico': saveimg, 'mode': 'zhuanfa'}
        ]);
        [Bindable]
        private var buttonArr3:ArrayCollection = new ArrayCollection([
            {'label': '标记已读', 'ico': saveimg, 'mode': 'read'},
            {'label': '标记未读', 'ico': saveimg, 'mode': 'unread'}
        ]);

        [Bindable]
        private var messagelist:ArrayCollection = new ArrayCollection();
        private var messageWin:MessagePanel;
        [Bindable]
        private var message:Object = null;
        //新增，保存，删除,回复，转发的处理函数
        //多个按钮点击事件的处理函数
        private function clickHander(e:ItemClickEvent):void {
            var data:Object = new Object();
            switch (e.item.mode) {
                case 'add':
                    messageWin = new MessagePanel();
                    messageWin.title = "发送信息";
                    messageWin.x = 0 - messageWin.width;
                    messageWin.y = (FlexGlobals.topLevelApplication.height - messageWin.height) / 2;

                    PopUpManager.addPopUp(messageWin, FlexGlobals.topLevelApplication as DisplayObject);
                    PopUpManager.bringToFront(messageWin);
                    break;
                case 'refresh':
                    showType();
                    break;
                case 'read':
                    data["id"] = messageGrid.selectedItem.rid;
                    data["do"] = true;
                    messageGrid.selectedItem.is_read = true;
                    messageGrid.invalidateTypicalItem();
                    HttpServiceUtil.getCHTTPServiceAndResult("/oamessage/flagMessage", null).send(data);
                    break;
                case 'unread':

                    data["id"] = messageGrid.selectedItem.rid;
                    data["do"] = false;
                    messageGrid.selectedItem.is_read = false;
                    messageGrid.invalidateTypicalItem();

                    HttpServiceUtil.getCHTTPServiceAndResult("/oamessage/flagMessage", null).send(data);
                    break;

                case 'huifu':
                    messageWin = new MessagePanel();
                    messageWin.title = "回复：" + message.title;
                    messageWin.message = message;
                    messageWin.type = "huifu";
                    messageWin.x = 0 - messageWin.width;
                    messageWin.y = (FlexGlobals.topLevelApplication.height - messageWin.height) / 2;

                    PopUpManager.addPopUp(messageWin, FlexGlobals.topLevelApplication as DisplayObject);
                    PopUpManager.bringToFront(messageWin);
                    break;
                case 'zhuanfa':
                    messageWin = new MessagePanel();
                    messageWin.title = "转发：" + message.title;
                    messageWin.message = message;
                    messageWin.type = "zhuanfa";
                    messageWin.x = 0 - messageWin.width;
                    messageWin.y = (FlexGlobals.topLevelApplication.height - messageWin.height) / 2;

                    PopUpManager.addPopUp(messageWin, FlexGlobals.topLevelApplication as DisplayObject);
                    PopUpManager.bringToFront(messageWin);
                    break;
            }


        }

        private function messageSelectionHandler(event:GridSelectionEvent):void {
            const eventGrid:DataGrid = event.currentTarget as DataGrid;
            var currentDataItem:Object = eventGrid.selectedItem;
            if (currentDataItem.flag) {
                messageWin = new MessagePanel();
                messageWin.title = currentDataItem.title;
                messageWin.message = currentDataItem;
                messageWin.type = null;
                messageWin.x = 0 - messageWin.width;
                messageWin.y = (FlexGlobals.topLevelApplication.height - messageWin.height) / 2;

                PopUpManager.addPopUp(messageWin, FlexGlobals.topLevelApplication as DisplayObject);
                PopUpManager.bringToFront(messageWin);
                return;
            }
            var data:Object = new Object();
            data["id"] = currentDataItem.id;
            currentDataItem.is_read = true;

            HttpServiceUtil.getCHTTPServiceAndResult("/oamessage/getMessageById", selectionMessageResult).send(data);
            data = new Object();
            data["id"] = messageGrid.selectedItem.rid;
            data["do"] = true;
            messageGrid.selectedItem.is_read = true;
            HttpServiceUtil.getCHTTPServiceAndResult("/oamessage/flagMessage", null).send(data);
            messageGrid.invalidateTypicalItem()
        }

        private function selectionMessageResult(result:Object, e:ResultEvent):void {


            var messagelist:ArrayCollection = new ArrayCollection(result.result as Array);

            var messageItem:MessageItem = null;
            messageGroup.removeAllElements();
            for each(var message:Object in messagelist) {
                messageItem = new MessageItem();
                if (messageGrid.selectedItem.id == message.id) {
                    this.message = message;
                    messageItem.setBackColor();
                }

                messageItem.message = message;
                if (messagelist.length == 1) {
                    messageItem.height = messageGroup.height - 20;
                }
                messageGroup.addElement(messageItem);
            }
        }

        // 全部、未读、已读 筛选
        private function showType():void {
            pagebar1.initPage();
            messagelist.removeAll();
            getMessages();

        }

        private function getMessages():void {
            var data:Object = new Object();
            data["type"] = messageType.selectedItem.mode;
            data["start"] = pagebar1.PageIndex * pagebar1.mPageSize;
            HttpServiceUtil.getCHTTPServiceAndResult("/oamessage/getMessageByUser", getMessagesResult, "POST").send(data);

        }

        private function getMessagesResult(result:Object, e:ResultEvent):void {
            if (result.success) {

                if (messagelist.length == 0) {
                    pagebar1.mPageSize = result.result.limit;
                    pagebar1.RecordCount = result.result.total;
                    pagebar1.initPage();
                }

                messagelist.removeAll();
                messagelist.addAll(new ArrayCollection(result.result.list as Array));
                pagebar1.RecordCount = result.result.total;
            }
        }


        override public function init(e:FlexEvent):void {
            if (!param) {
                getMessages();
            }

        }

        override public function changeCurrentUser(e:ChangeUserEvent):void {
            getMessages();

        }

        override public function closeContainer(e:CloseEvent):void {

        }

        // 重新进入时执行
        override public function reloadParamData(e:FlexEvent):void {
            if (param) {
                if (param.hasOwnProperty("messageType")) {
                    for each(var obj:Object in buttonArr0) {
                        if (obj.mode == param["messageType"]) {
                            messageType.selectedItem = obj;
                        }
                    }
                    showType();
                }

            }
            super.reloadParamData(e);
        }
        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<control:layout>
		<s:VerticalLayout  >
			
		</s:VerticalLayout>
	</control:layout>
	<s:BorderContainer left="0" top="0" height="45" width="100%" borderVisible="false" backgroundImage="{CBorderContainer.toolbgimg}">
		<s:layout>
			<s:HorizontalLayout gap="20" verticalAlign="middle" paddingLeft="20">
				
			</s:HorizontalLayout>
		</s:layout>
		<s:ButtonBar id="messageType" dataProvider="{buttonArr0}"  selectedIndex="0"  chromeColor="#faf0cc"  labelField="label"  height="30" change="showType()" >
		</s:ButtonBar>
		<mx:ButtonBar dataProvider="{buttonArr1}"  doubleClickEnabled="true"  chromeColor="#faf0cc"  labelField="label" iconField="ico"  height="30"  itemClick="clickHander(event);">
		</mx:ButtonBar>
		<mx:ButtonBar dataProvider="{buttonArr2}"  doubleClickEnabled="true"  chromeColor="#faf0cc"  labelField="label" iconField="ico"  height="30"  itemClick="clickHander(event);">
		</mx:ButtonBar>
		<mx:ButtonBar dataProvider="{buttonArr3}"  doubleClickEnabled="true"  chromeColor="#faf0cc"  labelField="label" iconField="ico"  height="30"  itemClick="clickHander(event);">
		</mx:ButtonBar>
	</s:BorderContainer>
	<s:BorderContainer height="100%" width="100%" borderVisible="false"  >
		<s:layout>
			<s:HorizontalLayout gap="2" verticalAlign="top">
				
			</s:HorizontalLayout>
		</s:layout>
		<s:VGroup width="250" height="100%">
			<s:DataGrid id="messageGrid" dataProvider="{messagelist}" selectionChange="messageSelectionHandler(event)"  width="100%" height="100%" rowHeight="50"  >
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="title" headerText="按时间排序" sortable="false" >
							<s:itemRenderer>
								<fx:Component>
									<s:GridItemRenderer>
										<s:HGroup width="100%" height="100%" verticalAlign="middle" gap="5" paddingLeft="5" paddingTop="3" paddingRight="3">
											
											<s:BorderContainer visible="{!data.is_read}" width="10" height="10" cornerRadius="20" borderWeight="1" backgroundColor="#aecfea" borderColor="#000000">
												
											</s:BorderContainer>
											<s:VGroup width="100%" height="100%">
												<s:Label width="100%" height="12" paddingLeft="10" visible="{!data.flag}" text="{data.authorname}" textDecoration="underline" fontSize="12" color="#434343">
													
												</s:Label>
												<s:Label width="100%" height="100%" text="{data.title}" maxDisplayedLines="-1" fontSize="15" color="#000000">
													
												</s:Label>
												
											</s:VGroup>
										</s:HGroup>
									</s:GridItemRenderer>
									
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
			<uicontrol:Pageing id="pagebar1" infolbl="false">
			</uicontrol:Pageing>
		</s:VGroup>
		
		<s:Scroller width="100%" height="100%">
			<s:VGroup id="messageGroup" width="100%" height="100%" gap="10" >

			</s:VGroup>
		</s:Scroller>
	</s:BorderContainer>
</control:CBorderContainer>
