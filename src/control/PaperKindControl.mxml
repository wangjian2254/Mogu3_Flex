<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" width="700" height="700" borderVisible="false" backgroundAlpha="0" xmlns:uicontrol="uicontrol.*">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace control "control.*";
		@namespace uicontrol "uicontrol.*";
		.boder{
			border-color:#cccccc;
			color:#8b8787;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
        import control.window.MessagePanel;

        import events.ChangeUserEvent;
        import events.CloseEvent;

        import httpcontrol.HttpServiceUtil;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.events.FlexEvent;
        import mx.events.ItemClickEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        import spark.events.IndexChangeEvent;

        [Bindable]
        private var buttonArr1:ArrayCollection = new ArrayCollection([
            {'label': '刷新', 'ico': refreshimg, 'mode': 'refresh'},
            {'label': '新增同级', 'ico': addimg, 'mode': 'addSam'},
            {'label': '新增下级', 'ico': addimg, 'mode': 'addNex'}
        ]);
        [Bindable]
        private var papKindArr:ArrayCollection = new ArrayCollection();
        ;
        private var state:String = "refresh";//refresh(查询状态),addSam(增加同级),addNex(增加下级),mod(修改状态)
        //新增，保存，删除,回复，转发的处理函数
        //多个按钮点击事件的处理函数
        private function clickHander():void {
            ba1.requireSelection = true;
            var item:Object = ba1.selectedItem;
            typeName.text = "";
            delBtn.enabled = false;
            var o:Object = paperKindTree.selectedItem;
            if (item.mode == "refresh") {
                state = "refresh";
                loadPagKindData();
                return;
            }
            if (item.mode == 'addSam') {
                state = "addSam";
                var parent:Object = paperKindTree.getParentItem(o);
                if (o && parent) {
                    parentName.text = parent.name;
                } else {
                    parentName.text = "";
                }
                return;
            }
            if (item.mode == 'addNex') {
                state = "addNex";
                if (o) {
                    parentName.text = o.name;
                }
                return;
            }
        }

        private function isValid():Boolean {
            var o:Object = getData();
            if (o["name"] == "") {
                Alert.show("类型名称不能为空", "提示");
                return false;
            }
            if (o["name"].length > 200) {
                Alert.show("类型名称不能超过200个字", "提示");
                return false;
            }
            return true;
        }

        //查询方法
        private function loadPagKindData():void {
            var o:Object = {};//如果需要补齐查询参数
            HttpServiceUtil.getCHTTPServiceAndResult("/kaoshi/getAllPaperKind", loadPagKindDataResult, "POST").send(o);
        };
        private function loadPagKindDataResult(result:Object, e:ResultEvent):void {
            if (result.success) {
                typeName.text = "";
                parentName.text = "";
                delBtn.enabled = false;
                var arr:Array = result.result is Array ? result.result : [];
                papKindArr.removeAll();
                papKindArr.addAll(new ArrayCollection(arr));
                for (var i:int = 0; i < papKindArr.length; i++) {
                    paperKindTree.expandChildrenOf(papKindArr[i], true);
                }
//					var arr:Array=createNodeDataByJson("id","fatherid",result.result as Array);
//					papKindArr=new ArrayCollection(arr);
            }
        }

        //保存方法
        private function savSubKindData():void {
            if (!isValid()) {
                return;
            }
            var o:Object = getData();
            HttpServiceUtil.getCHTTPServiceAndResult("/kaoshi/updatePaperKind", savSubKindDataResult, "POST").send(o);
        };
        private function savSubKindDataResult(result:Object, e:ResultEvent):void {
            if (result.success) {
                loadPagKindData();
            }
        }

        //删除方法
        private function delSubKindData():void {
            state = "del";
            Alert.show("是否删除", "提示", Alert.YES | Alert.NO, null, function (e:mx.events.CloseEvent):void {
                if (e.detail == Alert.YES) {
                    var o:Object = getData();
                    HttpServiceUtil.getCHTTPServiceAndResult("/kaoshi/delPaperKind", delSubKindDataResult, "POST").send(o);
                }
            });
        };
        private function delSubKindDataResult(result:Object, e:ResultEvent):void {
            if (result.success) {
                loadPagKindData();
            }
        }

        private function selectNode():void {
            ba1.requireSelection = false;
            ba1.selectedIndex = -1;
            state = "mod";
            delBtn.enabled = true;
            setFormData();
        }

        private function setFormData():void {
            var o:Object = paperKindTree.selectedItem;
            typeName.text = o.name;
            var parent:Object = paperKindTree.getParentItem(o);
            if (parent) {
                parentName.text = parent.name;
            } else {
                parentName.text = "";
            }
        }

        public function getData():Object {
            var o:Object = {};
            var n:Object = paperKindTree.selectedItem;
            o["name"] = typeName.text;
            var parent:Object;
            if (state == "addSam" && n) {
                parent = paperKindTree.getParentItem(paperKindTree.selectedItem);
                if (parent) {
                    o["father_kind"] = parent.id;
                }
                o["id"] = null;
            }
            if (state == "addNex" && n) {
                o["father_kind"] = n.id;
                o["id"] = null;
            }
            if ((state == "addSam" || state == "addNex" || state == "refresh") && !n) {
                o["father_kind"] = null;
                o["id"] = null;
            }
            if ((state == "mod" || state == "del") && n) {
                o["father_kind"] = n.fatherid;
                o["id"] = n.id;
            }
            return o;
        }

        override public function init(e:FlexEvent):void {
            loadPagKindData();
        }

        override public function changeCurrentUser(e:ChangeUserEvent):void {
            loadPagKindData();
        }

        override public function closeContainer(e:CloseEvent):void {

        }

        // 重新进入时执行
        override public function reloadParamData(e:FlexEvent):void {
        }
        ]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:BorderContainer top="5" bottom="5" left="5" right="5"  borderVisible="false" color="0x333333" skinClass="skins.contentBoxSkin">
		<s:layout>
			<s:VerticalLayout  >
				
			</s:VerticalLayout>
		</s:layout>
		<s:BorderContainer left="0" top="0" height="45" width="100%" borderVisible="false" backgroundImage="{CBorderContainer.toolbgimg}">
			<s:layout>
				<s:HorizontalLayout gap="20" verticalAlign="middle" paddingLeft="20">
					
				</s:HorizontalLayout>
			</s:layout>
			<s:ButtonBar id="ba1" dataProvider="{buttonArr1}" selectedIndex="0" doubleClickEnabled="true"  chromeColor="#faf0cc"  labelField="label" iconField="ico"  height="30"  click="clickHander()" requireSelection="true">
			</s:ButtonBar>
		</s:BorderContainer>
		<s:BorderContainer height="100%" width="100%" borderVisible="false"  >
			<s:layout>
				<s:HorizontalLayout gap="2">
					
				</s:HorizontalLayout>
			</s:layout>
			<mx:Tree id="paperKindTree" itemClick="selectNode()" dataProvider="{papKindArr}" height="100%" width="430" labelField="name">
			</mx:Tree>
			<s:BorderContainer width="100%" height="100%" borderVisible="true">
				<s:Form width="100%" height="100%">
					<s:FormItem label="类型名称">
						<s:TextInput id="typeName" maxChars="200" width="200" prompt="新增类型名称">
						</s:TextInput>
					</s:FormItem>
					<s:FormItem label="父级名称">
						<s:TextInput id="parentName" width="200" styleName="boder" editable="false">
						</s:TextInput>
					</s:FormItem>
					<mx:ControlBar>
						<s:Button id="savBtn" label="保存" color="white" chromeColor="red" height="25" click="savSubKindData()">
						</s:Button>
						<s:Button id="delBtn" label="删除" height="25" click="delSubKindData()" enabled="false">
						</s:Button>
					</mx:ControlBar>
				</s:Form>
			</s:BorderContainer>
			
		</s:BorderContainer>
	</s:BorderContainer>
</control:CBorderContainer>
